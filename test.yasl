
// TODO
// `:` return void and put return value in arg pointer
// `!` return error
// ? `@` return value exactly as specified ?
// actually, those are going to make this whole thing much more complex
// UPDATE
// or maybe `:` would mean define as is and `!` would mean define with -wunused-result

// TODO function declaration
//fn@ main:int [argc:int argv:char**]

// TODO call C function without any checks
// @printf[]

// TODO? make all fnc args const (we're going to eventually run into a problem in the future if we don't fix this)

// TODO not implemented
// macro add [a b]
//     (a + b)

// stdlib funcs
fn@ printf:int (const char *restrict format, ...) // I use macros here cuz i can't be bothered to implement restrict and all that shit
fn@ rand:int []

fn@ test123!int []

fn add-int:int [a:int b:int]
{
    var sum:int a
    inc sum b
    ret sum
}

fn main:int [argc:int argv_cpp:char**]
{
    printf['hi world\n']

    cast argv:void* argv_cpp
    printf['argc is %d AND argv is %p\n' argc argv]

    val a:int 5
    printf['a = %d\n' a]

    var b:int 6
    printf['b = %d\n' b]

    inc b 1
    printf['b = %d\n' b]

    inc b 2
    printf['b = %d\n' b]

    dec b 5
    printf['b = %d\n' b]

    val c:int add-int[6 8]
    printf['c = %d\n' c]

    val fib(0):int 0
    val fib(1):int 1
    val fib(2):int add-int[fib(0) fib(1)]
    printf['fib(2)=%d\n' fib(2)]

    val x:int 21
    val y:int 34
    val fib(n-1):int x
    val fib(n):int y
    val fib(n+1):int add-int[fib(n) fib(n-1)]
    printf['fib(n+1)=%d\n' fib(n+1)]

    // test123[] // TODO need to add syntax like `!test123[]` that adds a runtime assert

    {
        val z:int 5
        printf['z in scope = %d\n' z]
    }
    val z:int 6
    printf['z outside scope = %d\n' z]

    ret 0
}

fn test123!int []
{
    // TODO? automatically determine if fnc should be void
    printf['ho ho ho merry fuckmas\n'] // https://www.youtube.com/watch?v=UUJeFMpvcKk&t=314s

    if rand[] {
        ret 1
    }

    ret 0
}
