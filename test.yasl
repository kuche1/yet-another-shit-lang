
// fn asdfg[]{
//     return 5;
// }

// TODO
// `:` return void and put return value in arg pointer
// `!` return error
// ? `@` return value exactly as specified ?
// actually, those are going to make this whole thing much more complex

// TODO function declaration
//fn@ main:int [argc:int argv:char**]

// TODO call C function without any checks
// @printf[]

// TODO? make all fnc args const (we're going to eventually run into a problem in the future if we don't fix thos)

// TODO not implemented
// macro add [a b]
//     (a + b)

fn add-int:int [a:int b:int]
{
    var sum:int a
    inc sum b
    ret sum
}

fn main:int [argc:int argv:char**]
{
    printf["asdfg\n"]

    printf["argc=%d\n" argc]
    printf["argv=%p\n" (void*)argv]

    val a:int 5
    printf["a=%d\n" a]

    var b:int 6
    printf["b=%d\n" b]

    // inc a 1
    // compile time gcc error: modifying const variable

    inc b 1
    printf["b=%d\n" b]

    inc b 2
    printf["b=%d\n" b]

    dec b 5
    printf["b=%d\n" b]

    val c:int add-int[6 8]
    printf["c=%d\n" c]

    ret 0
}
